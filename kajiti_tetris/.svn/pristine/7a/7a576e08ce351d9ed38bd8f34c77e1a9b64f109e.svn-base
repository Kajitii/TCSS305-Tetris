/*
 * TCSS305 Assignment 6: Tetris
 * 5/24/2013 Aaron Chen
 */

package view;

import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.Box;
import javax.swing.JPanel;

import model.Controls;

/**
 * A single instance of a Tetris graphical user interface.
 * 
 * @author Kajiti
 * @version 0.6.1
 */
public class TetrisGameGUI extends JPanel {

  /** The serial version UID. */
  private static final long serialVersionUID = -2828059938703055988L;

  /** The default width of the stats panel. */
  private static final int WIDTH = 400;
  
  /** The default height of the stats panel. */
  private static final int HEIGHT = 600;
  
  /** The default level when starting a new game. */
  private static final int DEFAULT_LEVEL = 1;
  
  /** The initial number of lines needed to advance to level 2. */
  private static final int INITIAL_LINES = 10;

  private final TetrisBoardGUI my_board;
  private final TetrisPreviewGUI my_preview;
  private final TetrisStatsGUI my_stats_board;
  
  //private int my_score;
  
  //private int my_lines;
  
  //private int my_level;
  
  /** The lines required to advance to the next level. */
  private int my_lines_to_next_level;
  
  //private final TetrisStatsGUI my_stats;
  
  public TetrisGameGUI(final Observer the_o,
                       final Controls the_controls,
                       final int the_level) {
    super();
    //setLayout(new GridBagLayout());
    my_preview = new TetrisPreviewGUI();
    my_stats_board = new TetrisStatsGUI();
    my_board = new TetrisBoardGUI(my_preview, my_stats_board.getStats(), the_controls);
    my_board.addObserver(the_o);
    //my_stats = new TetrisStatsGUI();
    //add(my_stats, BorderLayout.EAST);
    
    

    //setPreferredSize(new Dimension(WIDTH, HEIGHT));
    init();
  }
  
  /**
   * The default constructor for <code>TetrisGameGUI</code>.
   * 
   * @param the_o the
   * @param the_controls the <code>Controls</code> to be assigned to this game instance.
   */
  public TetrisGameGUI(final Observer the_o, final Controls the_controls) {
    this(the_o, the_controls, DEFAULT_LEVEL);
  }
  
  /**
   * Initializes the window and all its components.
   */
  private void init() {
    final GridLayout grid = new GridLayout();
    grid.setHgap(10);
    setLayout(grid);
    final Box box = Box.createVerticalBox();
    add(my_board);
    my_preview.setAlignmentY(Component.CENTER_ALIGNMENT);
    my_stats_board.setAlignmentY(Component.CENTER_ALIGNMENT);
    box.add(my_preview);
    box.add(my_stats_board);
    
    add(box);
    
  }
  
  /**
   * Starts a game of Tetris.
   */
  public void start() {
    my_board.start();
  }
  
  /**
   * Ends the current game of Tetris.
   */
  public void endGame() {
    my_board.endGame();
  }
  
  /**
   * Pauses or unpauses the game.
   * 
   * @param the_b true if the game should be paused; false otherwise.
   */
  public void setPause(final boolean the_b) {
    my_board.setPause(the_b);
  }
  
  /**
   * Sends garbage blocks to this board.  Used for multiplayer.
   * 
   * @param the_lines the number of lines of garbage blocks to be sent.
   */
  public void sendGarbage(final int the_lines) {
    my_board.sendGarbage(the_lines);
  }
  
  /**
   * Sets the scale of all the GUI elements.
   * 
   * @param the_scale the scale value.
   */
  public void setScale(final double the_scale) {
    my_board.setScale(the_scale);
    my_preview.setScale(the_scale);
  }

//  /**
//   * {@inheritDoc}
//   * <p>
//   * If the Board passes an integer argument, it is assumed to be the number
//   * of lines cleared, and updates the score accordingly.
//   */
//  @Override
//  public void update(final Observable the_obs, final Object the_arg) {
//
//  }
  
  /**
   * Handles key input received from the parent component.
   * 
   * @param the_event the event to be passed.
   */
  public void handleKeyEvent(final KeyEvent the_event) {
    my_board.handleKeyEvent(the_event);
  }
  
}
